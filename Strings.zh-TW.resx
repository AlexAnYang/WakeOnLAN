<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="AbortSuccess" xml:space="preserve">
    <value>Abort {0} successful</value>
    <comment>Abort {machine} successful</comment>
  </data>
	<data name="AbortingShutdown" xml:space="preserve">
    <value>Aborting shutdown command on {0}</value>
    <comment>Aborting shutdown command on {0}</comment>
  </data>
	<data name="ChangesLost" xml:space="preserve">
    <value>Your changes will be lost.</value>
    <comment>Your changes will be lost.</comment>
  </data>
	<data name="ChangesNotSaved" xml:space="preserve">
    <value>Changes have not been saved</value>
    <comment>Changes have not been saved</comment>
  </data>
	<data name="EmergencyShutdown" xml:space="preserve">
    <value>Emergency shutdown started</value>
    <comment>Emergency shutdown started</comment>
  </data>
	<data name="ExportedTo" xml:space="preserve">
    <value>Settings were exported to [{0}]</value>
    <comment>Settings were exported to {0}</comment>
  </data>
	<data name="HostNotResponding" xml:space="preserve">
    <value>Host {0} not responding</value>
    <comment>Host not responding</comment>
  </data>
	<data name="ImmediateReboot" xml:space="preserve">
    <value>This will IMMEDIATELY reboot THIS machine.  Are you sure?</value>
    <comment>This will IMMEDIATELY reboot THIS machine.  Are you sure?</comment>
  </data>
	<data name="ImmediateShutdown" xml:space="preserve">
    <value>This will IMMEDIATELY shutdown THIS machine.  Are you sure?</value>
    <comment>This will IMMEDIATELY shutdown THIS machine.  Are you sure?</comment>
  </data>
	<data name="ImportedFrom" xml:space="preserve">
    <value>Settings were imported from [{0}]</value>
    <comment>Settings were imported from {0}</comment>
  </data>
	<data name="OffLine" xml:space="preserve">
    <value>Host is OFFLINE</value>
    <comment>Host is OFFLINE</comment>
  </data>
	<data name="OnLine" xml:space="preserve">
    <value>Host is ONLINE</value>
    <comment>Host is ONLINE</comment>
  </data>
	<data name="ResponseTime" xml:space="preserve">
    <value>{0} Response Time {1} ms</value>
    <comment>{host} Response Time {count} ms</comment>
  </data>
	<data name="SelectFile" xml:space="preserve">
    <value>Select a WakeOnLan settings file to import</value>
    <comment>Select a WakeOnLan settings file to import</comment>
  </data>
	<data name="SendShutdown" xml:space="preserve">
    <value>Sending shutdown command to {0}</value>
    <comment>Sending shutdown command to {host}</comment>
  </data>
	<data name="SentTo" xml:space="preserve">
    <value>Sent Wake Up packet to {0} at {1}...</value>
    <comment>Sent Wake Up packet to {host} at {mac}...</comment>
  </data>
	<data name="ErrorMsg" xml:space="preserve">
    <value>Error: {0}</value>
    <comment>Error: {0}</comment>
  </data>
	<data name="ShutdownSuccessful" xml:space="preserve">
    <value>Shutdown {0} successful</value>
    <comment>Shutdown {host} successful</comment>
  </data>
	<data name="ShutdownFailed" xml:space="preserve">
    <value>Shutdown failed for {0} {1}</value>
    <comment>Shutdown failed for {host} {error}</comment>
  </data>
	<data name="Successful" xml:space="preserve">
    <value>Successful</value>
    <comment>Successful</comment>
  </data>
	<data name="Title" xml:space="preserve">
    <value>Wake on LAN</value>
    <comment>Wake on LAN</comment>
  </data>
	<data name="Version" xml:space="preserve">
    <value>Version {0}.{1:00}.{2}</value>
    <comment>Version</comment>
  </data>
	<data name="WhereSave" xml:space="preserve">
    <value>Where do you want to save the settings?</value>
    <comment>Where do you want to save the settings?</comment>
  </data>
	<data name="AbortFailed" xml:space="preserve">
    <value>Abort {0} Error: {1}</value>
    <comment>Abort {machine} Error: {error message}</comment>
  </data>
	<data name="AreYouSure" xml:space="preserve">
    <value>Are you sure?</value>
    <comment>Are you sure?</comment>
  </data>
	<data name="Delete" xml:space="preserve">
    <value>Delete {0} records?</value>
    <comment>Delete {0} records?</comment>
  </data>
	<data name="isNew" xml:space="preserve">
    <value>New</value>
    <comment>New</comment>
  </data>
	<data name="Properties" xml:space="preserve">
    <value>Properties - {0}</value>
    <comment>Properties - {0}</comment>
  </data>
	<data name="AllMachines" xml:space="preserve">
    <value>All machines</value>
    <comment>All machines</comment>
  </data>
	<data name="Limited" xml:space="preserve">
    <value>{0} - trial version is limited to 3 machines</value>
    <comment>trial version is limited to 3 machines</comment>
  </data>
	<data name="Aborting" xml:space="preserve">
    <value>Aborting...</value>
    <comment>Aborting...</comment>
  </data>
	<data name="AbortShutdown" xml:space="preserve">
    <value>Abort Shutdown in progress...</value>
    <comment>Abort Shutdown in progress...</comment>
  </data>
	<data name="BeginShutdown" xml:space="preserve">
    <value>Begin shutdown...</value>
    <comment>Begin shutdown...</comment>
  </data>
	<data name="Pausing" xml:space="preserve">
    <value>Pausing...</value>
    <comment>Pausing...</comment>
  </data>
	<data name="ShutDownSeconds" xml:space="preserve">
    <value>Shutting down in {0} seconds...</value>
    <comment>Shutting down in {0} seconds...</comment>
  </data>
	<data name="ShuttingDown" xml:space="preserve">
    <value>Shutting down...</value>
    <comment>Shutting down...</comment>
  </data>
	<data name="Skipping" xml:space="preserve">
    <value>Skipping...</value>
    <comment>Skipping...</comment>
  </data>
	<data name="Opt_BroadcastAddress" xml:space="preserve">
    <value>Broadcast Address</value>
    <comment>Broadcast Address</comment>
  </data>
	<data name="Opt_BroadcastDesc" xml:space="preserve">
    <value>Enter the broadcast IP Address for the WOL broadcast packets.</value>
    <comment>Enter the broadcast IP Address for the WOL broadcast packets.</comment>
  </data>
	<data name="DefaultEmergency" xml:space="preserve">
    <value>緊急停車！</value>
    <comment>Emergency shutdown!</comment>
  </data>
	<data name="DefaultMessage" xml:space="preserve">
    <value>系統關機！</value>
    <comment>System is shutting down!</comment>
  </data>
	<data name="Done" xml:space="preserve">
    <value>Done</value>
    <comment>Done</comment>
  </data>
	<data name="Polling" xml:space="preserve">
    <value>Polling {0}</value>
    <comment>Polling {0}</comment>
  </data>
</root>